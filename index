<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>AFD â€“ Dashboard AHT20 (ESP32 + Supabase)</title>
  <link rel="preconnect" href="https://cdn.jsdelivr.net" />
  <style>
    :root{--card:#ffffff;--bg:#0f172a;--muted:#94a3b8}
    *{box-sizing:border-box}
    body{margin:0;font-family:system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;background:#0f172a;color:#e2e8f0}
    header{padding:20px 16px;border-bottom:1px solid #1f2937;background:linear-gradient(180deg,#0f172a 0,#0b1225 100%)}
    h1{margin:0;font-size:1.4rem}
    .wrap{max-width:1100px;margin:0 auto;padding:16px}
    .grid{display:grid;grid-template-columns:1fr;gap:16px}
    @media (min-width:900px){.grid{grid-template-columns:1fr 1fr}}
    .card{background:var(--card);color:#0f172a;border-radius:16px;padding:16px;box-shadow:0 6px 24px rgba(0,0,0,.25)}
    .kpis{display:grid;grid-template-columns:repeat(3,1fr);gap:12px}
    .kpi{background:#f8fafc;border:1px solid #e5e7eb;border-radius:12px;padding:12px}
    .kpi span{display:block}
    .kpi .label{font-size:.8rem;color:#64748b}
    .kpi .value{font-weight:700;font-size:1.4rem}
    table{width:100%;border-collapse:collapse;border-radius:12px;overflow:hidden}
    th,td{padding:10px 12px;border-bottom:1px solid #e5e7eb;font-size:.95rem}
    thead th{background:#f1f5f9;text-align:left}
    tbody tr:hover{background:#f8fafc}
    .muted{color:var(--muted)}
    footer{color:#94a3b8;font-size:.85rem;text-align:center;padding:24px}
    canvas{width:100% !important;height:320px !important}
    .tag{display:inline-block;padding:2px 8px;border-radius:999px;background:#e2e8f0;color:#111827;font-size:.75rem}
  </style>
</head>
<body>
  <header>
    <div class="wrap">
      <h1>AFD â€“ Dashboard AHT20 (ESP32 â†’ Supabase â†’ Web)</h1>
      <div class="muted">GrÃ¡ficas en tiempo real + tabla de lecturas</div>
    </div>
  </header>

  <main class="wrap">
    <section class="card">
      <div class="kpis">
        <div class="kpi">
          <span class="label">Ãšltima temperatura</span>
          <span id="kpi-temp" class="value">â€”</span>
        </div>
        <div class="kpi">
          <span class="label">Ãšltima humedad</span>
          <span id="kpi-hum" class="value">â€”</span>
        </div>
        <div class="kpi">
          <span class="label">Ãšltima lectura</span>
          <span id="kpi-time" class="value">â€”</span>
        </div>
      </div>
    </section>

    <section class="grid">
      <div class="card">
        <h3 style="margin:0 0 8px">Temperatura (Ãºltimas lecturas)</h3>
        <canvas id="chartTemp"></canvas>
      </div>
      <div class="card">
        <h3 style="margin:0 0 8px">Humedad (Ãºltimas lecturas)</h3>
        <canvas id="chartHum"></canvas>
      </div>
    </section>

    <section class="card" style="margin-top:16px">
      <div style="display:flex;justify-content:space-between;align-items:center;gap:12px;flex-wrap:wrap">
        <h3 style="margin:0">Lecturas recientes</h3>
        <div><span class="tag" id="deviceTag">Dispositivo: â€”</span></div>
      </div>
      <div class="muted" style="margin:6px 0 12px">Se muestran las Ãºltimas 200 filas.</div>
      <div style="overflow:auto">
        <table id="tbl">
          <thead>
            <tr>
              <th>Fecha/Hora</th>
              <th>Device</th>
              <th>Temp (Â°C)</th>
              <th>Humedad (%)</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </section>
  </main>

  <footer>AFD â€¢ Supabase + ESP32 â€¢ Realtime</footer>

  <!-- Supabase JS v2 + Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4"></script>

  <script>
    // ðŸ”§ CONFIGURA ESTO:
    const SUPABASE_URL = "https://aefwdtlzqiqdchzyjxeu.supabase.co";
    const SUPABASE_ANON_KEY = "PEGAR_AQUI_TU_ANON_KEY"; // sin < >
    const TABLE = "aht_readings";
    // Opcional: filtra por tu device si quieres
    const DEVICE_FILTER = null; // p.ej. "AFD-esp32-01" o null para todos

    const sb = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    // Elementos UI
    const tbody = document.querySelector("#tbl tbody");
    const kpiTemp = document.getElementById("kpi-temp");
    const kpiHum  = document.getElementById("kpi-hum");
    const kpiTime = document.getElementById("kpi-time");
    const deviceTag = document.getElementById("deviceTag");

    // Chart.js: datasets vacÃ­os
    const labels = [];
    const tempData = [];
    const humData = [];

    const chartTemp = new Chart(document.getElementById("chartTemp"), {
      type: "line",
      data: { labels, datasets: [{ label: "Temperatura (Â°C)", data: tempData, tension: .2 }] },
      options: { responsive: true, animation:false, scales:{ x:{ ticks:{ maxRotation:0, autoSkip:true } } } }
    });

    const chartHum = new Chart(document.getElementById("chartHum"), {
      type: "line",
      data: { labels, datasets: [{ label: "Humedad (%)", data: humData, tension: .2 }] },
      options: { responsive: true, animation:false, scales:{ x:{ ticks:{ maxRotation:0, autoSkip:true } } } }
    });

    function fmtTime(iso) {
      return new Date(iso).toLocaleString();
    }

    function upsertRow(r) {
      const tr = document.createElement("tr");
      tr.innerHTML = `
        <td>${fmtTime(r.created_at)}</td>
        <td>${r.device_id}</td>
        <td>${Number(r.temperature_c).toFixed(2)}</td>
        <td>${Number(r.humidity_pct).toFixed(2)}</td>`;
      tbody.prepend(tr);
      // limita filas visibles
      while (tbody.children.length > 200) tbody.removeChild(tbody.lastChild);
    }

    function pushChartPoint(r) {
      const x = fmtTime(r.created_at);
      labels.push(x);
      tempData.push(Number(r.temperature_c));
      humData.push(Number(r.humidity_pct));
      // limitar a 200 puntos
      if (labels.length > 200) { labels.shift(); tempData.shift(); humData.shift(); }
      chartTemp.update();
      chartHum.update();
    }

    function setKPIs(r) {
      if (!r) return;
      kpiTemp.textContent = `${Number(r.temperature_c).toFixed(2)} Â°C`;
      kpiHum.textContent = `${Number(r.humidity_pct).toFixed(2)} %`;
      kpiTime.textContent = fmtTime(r.created_at);
      deviceTag.textContent = `Dispositivo: ${r.device_id}`;
    }

    async function cargarInicial() {
      let query = sb.from(TABLE)
        .select("created_at, device_id, temperature_c, humidity_pct")
        .order("created_at", { ascending: false })
        .limit(200);
      if (DEVICE_FILTER) query = query.eq("device_id", DEVICE_FILTER);

      const { data, error } = await query;
      if (error) { console.error(error); alert("Error cargando lecturas: " + error.message); return; }

      // Pinta tabla (desc -> asc para grÃ¡ficos)
      tbody.innerHTML = "";
      data.forEach(upsertRow);

      const asc = [...data].reverse();
      labels.length = tempData.length = humData.length = 0;
      asc.forEach(pushChartPoint);

      if (data[0]) setKPIs(data[0]);
    }

    function suscribirRealtime() {
      sb.channel("aht_readings-realtime")
        .on("postgres_changes",
          { event: "INSERT", schema: "public", table: TABLE },
          (payload) => {
            const r = payload.new;
            if (DEVICE_FILTER && r.device_id !== DEVICE_FILTER) return;
            upsertRow(r);
            pushChartPoint(r);
            setKPIs(r);
          })
        .subscribe();
    }

    // Arranque
    (async () => {
      await cargarInicial();
      suscribirRealtime();
    })();
  </script>
</body>
</html>
